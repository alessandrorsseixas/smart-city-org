# Nome do Workflow: Exibido na aba "Actions" do repositório no GitHub.
name: Docker Image CI House-Control

# Gatilhos (Triggers): Define quando a automação será executada.
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# Define variáveis de ambiente para todo o workflow, evitando repetição.
env:
  REGISTRY: ghcr.io
  # Formato: ghcr.io/SEU_USUARIO_OU_ORG/NOME_DA_IMAGEM
  IMAGE_NAME: ${{ github.repository }}/house-control

# Trabalhos (Jobs): Define um ou mais jobs que rodam em sequência ou em paralelo.
jobs:
  # Job para executar testes antes de qualquer outra coisa.
  test:
    name: Run Unit Tests
    runs-on: self-hosted # Ou ubuntu-latest se não precisar de acesso a recursos internos
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Configura o ambiente Java (ex: JDK 17)
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Run Maven Tests
      # Garante que os testes sejam executados no diretório correto
      working-directory: ./apps/house-control
      run: mvn test # Ou ./gradlew test

  # Job para construir e publicar a imagem, depende do sucesso do job de teste.
  build-and-push:
    name: Build and Push Docker Image
    needs: test # Garante que este job só rode se os testes passarem
    runs-on: self-hosted
    
    # Define permissões para que o job possa escrever no GHCR
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Action oficial do Docker para login seguro no registry
    - name: Log in to the Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Extrai metadados, como as tags da imagem, de forma inteligente
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        # Gera a tag 'latest' para push na branch main e a tag com o SHA do commit
        tags: |
          type=sha,prefix=
          type=raw,value=latest,enable={{is_default_branch}}

    # Action que configura o Buildx e habilita o cache
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Action principal que constrói e publica, utilizando cache.
    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: ./apps/house-control # Caminho para o Dockerfile
        file: ./apps/house-control/Dockerfile
        push: ${{ github.event_name != 'pull_request' }} # Só faz push se não for um PR
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha # Habilita cache a partir do cache do GitHub Actions
        cache-to: type=gha,mode=max # Escreve o cache ao final