# Nome do Workflow: Exibido na aba "Actions" do repositório no GitHub.
name: Docker Image CI House-Control

# Gatilhos (Triggers): Define quando a automação será executada.
on:
  # Executa quando houver um push para a branch "main".
  push:
    branches: [ "main" ]
  # Executa também quando um pull request for aberto ou atualizado para a branch "main".
  pull_request:
    branches: [ "main" ]

# Trabalhos (Jobs): Define um ou mais jobs que rodam em sequência ou em paralelo.
jobs:
  # Nome do job. Você pode ter vários, como "build", "test", "deploy".
  build:
    # Estratégia de execução: Define onde o job será executado.
    # 'self-hosted' indica que ele deve ser executado em um runner que você mesmo configurou,
    # em vez de uma máquina virtual gerenciada pelo GitHub.
    runs-on: self-hosted

    # Passos (Steps): Sequência de tarefas que compõem o job.
    steps:
    # 1. Checkout do código-fonte
    # Baixa o código do seu repositório para o ambiente do runner.
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Build da imagem Docker
    # Constrói a imagem a partir do Dockerfile.
    - name: Build the Docker image
      # O 'working-directory' garante que o comando seguinte será executado
      # a partir da pasta da sua aplicação, usando o contexto correto.
      working-directory: ./Apps/house-control
      # CORREÇÃO: Especificamos o uso do shell 'sh' em vez do 'bash' padrão.
      # Isso resolve o erro em ambientes Linux mínimos onde /usr/bin/bash não existe,
      # utilizando um shell POSIX padrão (/bin/sh) que é universalmente disponível.
      shell: sh
      run: docker build . --file Dockerfile --tag "house-control:$(date +%s)"
